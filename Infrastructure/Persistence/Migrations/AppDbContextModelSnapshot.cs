// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("DistributorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Deliveries", (string)null);
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Distributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Distributors", (string)null);
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ProductionOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VehicleStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.OrderMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("OrderMaterials", (string)null);
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderMaterialId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductionOrderStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderMaterialId");

                    b.ToTable("ProductionOrders", (string)null);
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionStage", b =>
                {
                    b.Property<Guid>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ProductionOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("StageId");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionStages", (string)null);
                });

            modelBuilder.Entity("Modules.QualityInspectionModule.Entities.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InspectionResult")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProductionStageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionStageId");

                    b.ToTable("Inspections", (string)null);
                });

            modelBuilder.Entity("Modules.QualityInspectionModule.Entities.InspectionFailure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CorrectionActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionFailures", (string)null);
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Delivery", b =>
                {
                    b.HasOne("Modules.LogisticsDistributionModule.Entities.Distributor", "Distributor")
                        .WithMany("Deliveries")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modules.LogisticsDistributionModule.Entities.Vehicle", "Vehicle")
                        .WithMany("Deliveries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Vehicle", b =>
                {
                    b.HasOne("Modules.ProductionInventoryModule.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("Vehicles")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.OrderMaterial", b =>
                {
                    b.HasOne("Modules.ProductionInventoryModule.Entities.Material", "Material")
                        .WithMany("OrderMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionOrder", b =>
                {
                    b.HasOne("Modules.ProductionInventoryModule.Entities.OrderMaterial", "OrderMaterial")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("OrderMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderMaterial");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionStage", b =>
                {
                    b.HasOne("Modules.ProductionInventoryModule.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionStages")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("Modules.QualityInspectionModule.Entities.Inspection", b =>
                {
                    b.HasOne("Modules.ProductionInventoryModule.Entities.ProductionStage", "ProductionStage")
                        .WithMany("Inspections")
                        .HasForeignKey("ProductionStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionStage");
                });

            modelBuilder.Entity("Modules.QualityInspectionModule.Entities.InspectionFailure", b =>
                {
                    b.HasOne("Modules.QualityInspectionModule.Entities.Inspection", "Inspection")
                        .WithMany("InspectionFailures")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Distributor", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Modules.LogisticsDistributionModule.Entities.Vehicle", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.Material", b =>
                {
                    b.Navigation("OrderMaterials");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.OrderMaterial", b =>
                {
                    b.Navigation("ProductionOrders");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionOrder", b =>
                {
                    b.Navigation("ProductionStages");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Modules.ProductionInventoryModule.Entities.ProductionStage", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Modules.QualityInspectionModule.Entities.Inspection", b =>
                {
                    b.Navigation("InspectionFailures");
                });
#pragma warning restore 612, 618
        }
    }
}
