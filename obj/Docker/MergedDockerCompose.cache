name: dockercompose15259825488937608702
services:
  api:
    build:
      context: C:\Users\jefferson.aleluia\Documents\Repos\ModularMonolith-.Net
      dockerfile: Api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
      ConnectionStrings__DefaultConnection: User ID=postgres;Password=root;Server=postgres;Port=5432;Database=autofactorysystem;Pooling=true;
      ConnectionStrings__Redis: redis:6379
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5000
        published: "5000"
        protocol: tcp
      - mode: ingress
        target: 8080
        protocol: tcp
      - mode: ingress
        target: 8081
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\jefferson.aleluia\AppData\Roaming/Microsoft/UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\jefferson.aleluia\AppData\Roaming/Microsoft/UserSecrets
        target: /root/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\jefferson.aleluia\AppData\Roaming/ASP.NET/Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\jefferson.aleluia\AppData\Roaming/ASP.NET/Https
        target: /root/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
  migrator:
    build:
      context: C:\Users\jefferson.aleluia\Documents\Repos\ModularMonolith-.Net
      dockerfile: Migrator.Dockerfile
    command:
      - sh
      - -c
      - " echo '⏳ Aguardando PostgreSQL ficar disponível...'; until pg_isready -h postgres -U postgres -d autofactorysystem; do sleep 2; done; echo '\U0001F6E0️ Aplicando migrations...'; dotnet ef database update --project Infrastructure --startup-project Api --verbose "
    depends_on:
      postgres:
        condition: service_healthy
        required: true
    networks:
      default: null
    volumes:
      - type: bind
        source: C:\Users\jefferson.aleluia\Documents\Repos\ModularMonolith-.Net
        target: /src
        bind:
          create_host_path: true
    working_dir: /src
  postgres:
    environment:
      POSTGRES_DB: autofactorysystem
      POSTGRES_PASSWORD: root
      POSTGRES_USER: postgres
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U postgres -d autofactorysystem
      timeout: 5s
      interval: 5s
      retries: 10
    image: postgres:15
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5434"
        protocol: tcp
    volumes:
      - type: volume
        source: pg_data
        target: /var/lib/postgresql/data
        volume: {}
  redis:
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 5s
      interval: 5s
      retries: 5
    image: redis:7.2-alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    volumes:
      - type: volume
        source: redis_data
        target: /data
        volume: {}
networks:
  default:
    name: dockercompose15259825488937608702_default
volumes:
  pg_data:
    name: dockercompose15259825488937608702_pg_data
  redis_data:
    name: dockercompose15259825488937608702_redis_data